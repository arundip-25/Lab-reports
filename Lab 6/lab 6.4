import math

# Base class Shape
class Shape:
    # Abstract method area (to be overridden by derived classes)
    def area(self):
        raise NotImplementedError("Subclass must implement abstract method")

# Derived class Rectangle
class Rectangle(Shape):
    # Constructor to initialize width and height
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    # Override area() method for Rectangle
    def area(self):
        return self.width * self.height

# Derived class Circle
class Circle(Shape):
    # Constructor to initialize radius
    def __init__(self, radius):
        self.radius = radius
    
    # Override area() method for Circle
    def area(self):
        return math.pi * self.radius ** 2

# Demonstrating polymorphism
rectangle = Rectangle(5, 3)  # width=5, height=3
circle = Circle(4)           # radius=4

# Calling area() method for each object
print(f"Area of Rectangle: {rectangle.area()}")  # Should calculate width * height
print(f"Area of Circle: {circle.area()}")        # Should calculate Ï€ * radius^2
